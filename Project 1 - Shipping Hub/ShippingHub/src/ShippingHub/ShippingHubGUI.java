package ShippingHub;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*  Class:	<b>ShippingHubGUI</b>
*  File:	ShippingHubGUI.java
* <pre>
*  Description:	This program is an application to track the Parcels that pass through
*               a shipping hub. When the user clicks the application’s Scan New Button, 
*               the applicationgenerates an ID and arrival time for the new Parcel. 
*               Once a Parcel has been scanned, the user can enter recipient’s name and
*               shipping address for the Parcel. The other menu options allow for the
*               user to remove or modify the information of Parcels that have already
*               been scanned. The user can navigate through the list of scanned Parcels
*               by using the Back or Next Buttons. Finally, users are able to view a
*               numeric list of all Parcels destined for a particular state. Additional
*               features include that previously scanned parcels can be recalled and be
*               kept track of even after the user has exited and restarted the application
*               at a later time. Removing Parcels defaults to the last scanned parcel.
*  @author:	<i>Ryu Muthui</i>
*  Environment:	PC, Windows 7, jdk1.7_17, NetBeans 7.3
*  Date:	4/24/2013
*  Hours:       30 hours
*  @version	1.01
*  @see         java.awt.Toolkit
*  @see         java.io.BufferedReader
*  @see         java.io.FileNotFoundException
*  @see         java.io.FileReader
*  @see         java.io.IOException
*  @see         java.text.SimpleDateFormat
*  @see         java.util.ArrayList
*  @see         java.util.Date
*  @see         java.util.StringTokenizer;
*  @see         javax.swing.DefaultListModel
*  @see         javax.swing.JOptionPane   
* </pre>
*  History Log:	Created on April 9, 2013, Completed April 24th 2013.
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class ShippingHubGUI extends javax.swing.JFrame 
{
    //instance Variables
   private int parcelIDNumber = 1000,
               currentlySelectedIndex = 0,   
               parcelID = 0;
 
   private String stateList = "src/ShippingHub/StateList.txt";
   private String parcelData = "src/ShippingHub/ParcelData.txt";
   private String name, address, city, state, zip, arrivalTime;
            
    //ArrayList to store all information
    ArrayList <ParcelInformation> shippingInfo;
    
    //parcelInformation  myparcel
    ParcelInformation myParcel;

    /**
     * Creates new form ShippingHubGUI
     */
    public ShippingHubGUI() 
    {
        initComponents();
        
        //Sets the Splash Screen timer to 5 seconds.
        try {Thread.sleep(5000);}
        catch(InterruptedException e){}
        
        this.shippingInfo = new ArrayList();
        
        //Sets scan new button as default and request focus to it at start.
        this.getRootPane().setDefaultButton(scanNewJButton); 
        scanNewJButton.requestFocus();
        
        //Sets the form to display at the center.
        setLocationRelativeTo(null);
        
        //Sets icon image on form.
        this.setIconImage(Toolkit.getDefaultToolkit()
                .getImage("src\\ShippingHub\\Images\\Parcel.png"));
        
        //call method to disable appropriate buttons and menus at start.
        disableButtonsAndMenus();
        
        //read the StateList.txt and populate the JComboBoxes.
        readStates(stateList);
        
        //read the ParcelData.txt and populate the shippingInfo Array List.
        readParcelData(parcelData);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        arrivalJPanel = new javax.swing.JPanel();
        arrivedJLabel = new javax.swing.JLabel();
        parcelJLabel = new javax.swing.JLabel();
        arrivalJTextField = new javax.swing.JTextField();
        parcelInfoJPanel = new javax.swing.JPanel();
        parcelIDJLabel = new javax.swing.JLabel();
        nameJLabel = new javax.swing.JLabel();
        addressJLabel = new javax.swing.JLabel();
        cityJLabel = new javax.swing.JLabel();
        stateJLabel = new javax.swing.JLabel();
        zipCodeJLabel = new javax.swing.JLabel();
        parcelIDJTextField = new javax.swing.JTextField();
        nameJTextField = new javax.swing.JTextField();
        addressJTextField = new javax.swing.JTextField();
        cityJTextField = new javax.swing.JTextField();
        stateJComboBox = new javax.swing.JComboBox();
        zipJFormattedTextField = new javax.swing.JFormattedTextField();
        parcelByStateJPanel = new javax.swing.JPanel();
        parcelStateJComboBox = new javax.swing.JComboBox();
        parcelIDJScrollPane = new javax.swing.JScrollPane();
        parcelIDJList = new javax.swing.JList();
        controlJPanel = new javax.swing.JPanel();
        scanNewJButton = new javax.swing.JButton();
        addJButton = new javax.swing.JButton();
        removeJButton = new javax.swing.JButton();
        editJButton = new javax.swing.JButton();
        updateJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        nextJButton = new javax.swing.JButton();
        fielJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        clearJMenuItem = new javax.swing.JMenuItem();
        printJMenuItem = new javax.swing.JMenuItem();
        exitJMenuItem = new javax.swing.JMenuItem();
        actionJMenu = new javax.swing.JMenu();
        scanNewJMenuItem = new javax.swing.JMenuItem();
        addJMenuItem = new javax.swing.JMenuItem();
        removeJMenuItem = new javax.swing.JMenuItem();
        editJMenuItem = new javax.swing.JMenuItem();
        updateJMenuItem = new javax.swing.JMenuItem();
        backJMenuItem = new javax.swing.JMenuItem();
        nextJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Shipping Hub");
        setResizable(false);

        arrivedJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        arrivedJLabel.setText("Arrived at:");

        parcelJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Parcel.png"))); // NOI18N

        arrivalJTextField.setEditable(false);
        arrivalJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        arrivalJTextField.setToolTipText("Displays the parcel's arrival time.");

        javax.swing.GroupLayout arrivalJPanelLayout = new javax.swing.GroupLayout(arrivalJPanel);
        arrivalJPanel.setLayout(arrivalJPanelLayout);
        arrivalJPanelLayout.setHorizontalGroup(
            arrivalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, arrivalJPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(arrivedJLabel)
                .addGap(18, 18, 18)
                .addComponent(arrivalJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(parcelJLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        arrivalJPanelLayout.setVerticalGroup(
            arrivalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, arrivalJPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(parcelJLabel))
            .addGroup(arrivalJPanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(arrivalJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arrivalJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(arrivedJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        parcelInfoJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Parcel Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        parcelIDJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        parcelIDJLabel.setText("Parcel ID:");

        nameJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nameJLabel.setText("Name:");

        addressJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addressJLabel.setText("Address:");

        cityJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cityJLabel.setText("City:");

        stateJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stateJLabel.setText("State:");
        stateJLabel.setToolTipText("");

        zipCodeJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        zipCodeJLabel.setText("Zip:");

        parcelIDJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        parcelIDJTextField.setToolTipText("Displays the parcel ID number.");
        parcelIDJTextField.setDoubleBuffered(true);

        nameJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nameJTextField.setToolTipText("Displays the parcel recipient's name.");

        addressJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addressJTextField.setToolTipText("Displays the parcel's destination street address.");

        cityJTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cityJTextField.setToolTipText("Displays the parcel's destination city.");

        stateJComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        stateJComboBox.setToolTipText("Select the destination State.");

        try {
            zipJFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        zipJFormattedTextField.setToolTipText("Displays the destination Zip Code.");
        zipJFormattedTextField.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        zipJFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                zipJFormattedTextFieldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout parcelInfoJPanelLayout = new javax.swing.GroupLayout(parcelInfoJPanel);
        parcelInfoJPanel.setLayout(parcelInfoJPanelLayout);
        parcelInfoJPanelLayout.setHorizontalGroup(
            parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parcelInfoJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parcelInfoJPanelLayout.createSequentialGroup()
                        .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressJLabel)
                            .addComponent(cityJLabel))
                        .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(parcelInfoJPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(cityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stateJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stateJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(zipCodeJLabel)
                                .addGap(12, 12, 12)
                                .addComponent(zipJFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(parcelInfoJPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addressJTextField))))
                    .addGroup(parcelInfoJPanelLayout.createSequentialGroup()
                        .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(parcelIDJLabel)
                            .addComponent(nameJLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(parcelIDJTextField)
                            .addComponent(nameJTextField))))
                .addContainerGap())
        );
        parcelInfoJPanelLayout.setVerticalGroup(
            parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parcelInfoJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parcelIDJLabel)
                    .addComponent(parcelIDJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameJLabel)
                    .addComponent(nameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressJLabel)
                    .addComponent(addressJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(stateJComboBox)
                    .addComponent(zipCodeJLabel)
                    .addComponent(cityJTextField)
                    .addGroup(parcelInfoJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stateJLabel)
                        .addComponent(cityJLabel))
                    .addComponent(zipJFormattedTextField))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        parcelByStateJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Parcel by State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        parcelStateJComboBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        parcelStateJComboBox.setToolTipText("Select to view Parcels by States.");
        parcelStateJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parcelStateJComboBoxActionPerformed(evt);
            }
        });

        parcelIDJList.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        parcelIDJList.setToolTipText("Select a Parcel ID to view its Information.");
        parcelIDJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                parcelIDJListMouseClicked(evt);
            }
        });
        parcelIDJScrollPane.setViewportView(parcelIDJList);

        javax.swing.GroupLayout parcelByStateJPanelLayout = new javax.swing.GroupLayout(parcelByStateJPanel);
        parcelByStateJPanel.setLayout(parcelByStateJPanelLayout);
        parcelByStateJPanelLayout.setHorizontalGroup(
            parcelByStateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parcelByStateJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parcelByStateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parcelStateJComboBox, 0, 107, Short.MAX_VALUE)
                    .addComponent(parcelIDJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        parcelByStateJPanelLayout.setVerticalGroup(
            parcelByStateJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parcelByStateJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parcelStateJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(parcelIDJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        controlJPanel.setLayout(new java.awt.GridLayout(1, 7));

        scanNewJButton.setMnemonic('S');
        scanNewJButton.setText("Scan New");
        scanNewJButton.setToolTipText("Select to enable scanning of new parcel.");
        scanNewJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanNewJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(scanNewJButton);

        addJButton.setMnemonic('A');
        addJButton.setText("Add");
        addJButton.setToolTipText("Select to add new parcel information.");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(addJButton);

        removeJButton.setMnemonic('R');
        removeJButton.setText("Remove");
        removeJButton.setToolTipText("Select to remove parcel information.");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(removeJButton);

        editJButton.setMnemonic('E');
        editJButton.setText("Edit");
        editJButton.setToolTipText("Select to enable editing of parcel information.");
        editJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(editJButton);

        updateJButton.setMnemonic('U');
        updateJButton.setText("Update");
        updateJButton.setToolTipText("Select to confirm changes to the parcel information.");
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(updateJButton);

        backJButton.setMnemonic('B');
        backJButton.setText("< Back");
        backJButton.setToolTipText("Click to view the previous parcel information.");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(backJButton);

        nextJButton.setMnemonic('N');
        nextJButton.setText("Next >");
        nextJButton.setToolTipText("Click to view the next parcel information.");
        nextJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(nextJButton);

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        clearJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        clearJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Clear.png"))); // NOI18N
        clearJMenuItem.setMnemonic('L');
        clearJMenuItem.setText("Clear");
        clearJMenuItem.setToolTipText("Select to clear all aditable fields.");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);

        printJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        printJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Print.png"))); // NOI18N
        printJMenuItem.setMnemonic('P');
        printJMenuItem.setText("Print");
        printJMenuItem.setToolTipText("Select to print out the form.");
        printJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printJMenuItem);

        exitJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Exit.png"))); // NOI18N
        exitJMenuItem.setMnemonic('X');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.setToolTipText("Select to exit the application.");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        fielJMenuBar.add(fileJMenu);

        actionJMenu.setMnemonic('C');
        actionJMenu.setText("Action");

        scanNewJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Scan.png"))); // NOI18N
        scanNewJMenuItem.setMnemonic('S');
        scanNewJMenuItem.setText("Scan New");
        scanNewJMenuItem.setToolTipText("Select to enable scanning of new parcel.");
        scanNewJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanNewJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(scanNewJMenuItem);

        addJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Add.png"))); // NOI18N
        addJMenuItem.setMnemonic('A');
        addJMenuItem.setText("Add");
        addJMenuItem.setToolTipText("Select to add new parcel information.");
        addJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(addJMenuItem);

        removeJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Remove.png"))); // NOI18N
        removeJMenuItem.setMnemonic('R');
        removeJMenuItem.setText("Remove");
        removeJMenuItem.setToolTipText("Select to remove parcel information.");
        removeJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(removeJMenuItem);

        editJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Edit.png"))); // NOI18N
        editJMenuItem.setMnemonic('E');
        editJMenuItem.setText("Edit");
        editJMenuItem.setToolTipText("Select to enable editing of parcel information.");
        editJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(editJMenuItem);

        updateJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Update.png"))); // NOI18N
        updateJMenuItem.setMnemonic('U');
        updateJMenuItem.setText("Update");
        updateJMenuItem.setToolTipText("Select to confirm changes to the parcel information.");
        updateJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(updateJMenuItem);

        backJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Back.png"))); // NOI18N
        backJMenuItem.setMnemonic('B');
        backJMenuItem.setText("Back");
        backJMenuItem.setToolTipText("Click to view the previous parcel information.");
        backJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(backJMenuItem);

        nextJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/Forward.png"))); // NOI18N
        nextJMenuItem.setMnemonic('N');
        nextJMenuItem.setText("Next");
        nextJMenuItem.setToolTipText("Click to view the next parcel information.");
        nextJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(nextJMenuItem);

        fielJMenuBar.add(actionJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");

        aboutJMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ShippingHub/Images/About.png"))); // NOI18N
        aboutJMenuItem.setMnemonic('O');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Displays more info about this application.");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        fielJMenuBar.add(helpJMenu);

        setJMenuBar(fielJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(controlJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(parcelInfoJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(parcelByStateJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(arrivalJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(arrivalJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(parcelInfoJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parcelByStateJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Select to exit the application.
     * @param evt exitJMenuItem 
     */
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        //Select to exit the program.
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed
    
    /**
     * When selected, enables the application to allow for user input to take in
     * information and sets the scanned-in time of the parcel being added.
     * @param evt scanNewJButtonActionPerformed
     */
    private void scanNewJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanNewJButtonActionPerformed
        //enables the application to allow for user input to take in information.
        
        //calls addAddingOfParcelInfo method to allow user input entry.
        enableAddingOfParcelInfo();
        
        //increase parcel ID number by 1 each time user adds a new entry.
        if( parcelIDJTextField.getText().trim().equals(""))
        {
            parcelIDNumber++;
            parcelIDJTextField.setText(Integer.toString(parcelIDNumber));
        }
        else
        {
            parcelIDNumber = Integer.parseInt(parcelIDJTextField.getText());
            parcelIDNumber++;
            parcelIDJTextField.setText(Integer.toString(parcelIDNumber));
        }
        
        //set the arrivale time of the package and display it.
        Date currentDate = new Date();
        SimpleDateFormat time = new SimpleDateFormat ("E yyyy.MM.dd 'at' hh:mm:ss a zzz");
        arrivalJTextField.setText(time.format(currentDate));
        nameJTextField.requestFocus();
        stateJComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_scanNewJButtonActionPerformed
   
    /**
     * When selected, adds the data entered by the user and stores them in the appropriate
     * variables. It is then passed on to and stored in the array list to be recalled for
     * later use. Checks for input validation before the user can add it to the array list.
     * @throws NullPointerException
     * @param evt addJButtonActionPerformed
     */
    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed
 
        //create a new ParcelInformation object to hold variable values.
        myParcel = new ParcelInformation();
        //set arrivalTime value to the time stamp value.
        arrivalTime = arrivalJTextField.getText();
        
        try 
        {
            //A check to make sure all entry fields have valid user input.
             if (nameJTextField.getText().trim().equals("") ||
                 addressJTextField.getText().trim().equals("") ||
                 cityJTextField.getText().trim().equals("") ||
                 zipJFormattedTextField.getText().equals("     ") )
                 //Throw NullPointerException if one or more fields has invalid entry.
                 throw new NullPointerException();
            
            //get information from user entry and store them into appropritate variables.
            getInformation();
            
            //pass the information obtained to myParcel object.
            myParcel = new ParcelInformation(parcelID,name,address,city,state,
                    zip, arrivalTime);
            
            //add information to the array list.
            shippingInfo.add(myParcel);
            
            //set the currenlty selected item index to match that of the entry of the array.
            currentlySelectedIndex = shippingInfo.indexOf(myParcel);
            
            //check if array size is less than 1, if so disable back/next buttons.
            if (shippingInfo.size() <= 1)
            {disableScrolling();}
            //if array size is greater than 2, enable back/next buttons.
            else
            {enableScrolling();}
            
            //set menu items and buttons upon successful entry to the array.
            resetMenuAndButtons();

            //Set appropriate text fields back to unselectable upon successful add.
            disableEntryFields();

            //set the parcelStateJComboBox to match that with the user entry.
            parcelStateJComboBox.setSelectedItem(stateJComboBox.getSelectedItem());
            
            //call setParcelByState method to update the parcelStateJComboBox.
            setParcelByState(); 
            
            //write the newly entered data to the shippingInfo array list.
            saveParcelData();

        }
        //Present user with error message if entry is invalid.
        catch(NullPointerException ex)
        {
            JOptionPane.showMessageDialog(null, "One or more entry fields has " +
                    "invalid entry." + "\n" + "Make sure all fields are filled out" + 
                    " correctly.", "Invalid Entry", + JOptionPane.WARNING_MESSAGE);                    
        }
    }//GEN-LAST:event_addJButtonActionPerformed
    
    /**
     * When selected, it removes the corresponding entry from the array list. It checks 
     * to see if the array list size is either 1 or 0 and prevents scrolling through the
     * array list.
     * @param evt removeJButtonActionPerformed
     */
    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed
        
        //prompt for confirmation of removing of parcel information.
        Object[] options = { "Yes", "No" };
          int choice = JOptionPane.showOptionDialog(null, "Remove Parcel?", 
              "Confirm removal?", JOptionPane.YES_NO_OPTION, 
              JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
          
        //interpret the user's choice
        if (choice == JOptionPane.YES_OPTION)
        {
        //Remove the selected entry from the array list.
        shippingInfo.remove(currentlySelectedIndex);
        
            //if array size is 1 disable scrolling, set the index value to 0.
            if(shippingInfo.size() == 1)
            {
                disableScrolling();
                currentlySelectedIndex = 0; 
                setInformation(); 
                removeJButton.setEnabled(true);
                removeJMenuItem.setEnabled(true);
                editJButton.setEnabled(true);
                editJMenuItem.setEnabled(true);

                //set the parcelStateJComboBox to match that with the currently selected parcel.
                parcelStateJComboBox.setSelectedItem(stateJComboBox.getSelectedItem());
            }
                //if array size is empty clear all entry fields and disable scrolling.
                else if (shippingInfo.isEmpty())
                    {
                        clearJMenuItemActionPerformed(evt);
                        disableScrolling();
                        parcelIDJTextField.setText("");
                        arrivalJTextField.setText("");
                        disableButtonsAndMenus();
                    }
            else
            {   
                //if index is not 0 subtract 1 and set the feilds.
                if(currentlySelectedIndex != 0)
                {
                    currentlySelectedIndex--;
                    setInformation();  
                    editJButton.setEnabled(true);
                    editJMenuItem.setEnabled(true);
                    
                    //set the parcelStateJComboBox to match that with the currently selected parcel.
                    parcelStateJComboBox.setSelectedItem(stateJComboBox.getSelectedItem());
                }
            }
            
            //update the parcelStateJComboBox and eneable the editing buttons.
            setParcelByState();
            
            //remove the parcel data from the shippingInfo array list.
            saveParcelData();            
        }  
    }//GEN-LAST:event_removeJButtonActionPerformed
    
    /**
     * Sets the form to allow editing of the currently selected parcel.
     * @param evt editJButtonActionPerformed
     */
    private void editJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJButtonActionPerformed
        //Call enableEditing Method to enable and disable appropriate fields.    
         enableEditing();
         nameJTextField.requestFocus();
    }//GEN-LAST:event_editJButtonActionPerformed
    
    /**
     * When selected, it updates the currently selected parcel with the new update
     * data. It checks for input validation as it does when adding new parcel
     * information.
     * @throws NullPointerException
     * @param evt updateJButtonActionPerformed
     */
    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        //Allow user to edit entry fields and save new changes.
        myParcel = new ParcelInformation();
        arrivalTime = arrivalJTextField.getText();
        
        //prompt for confirmation of editing parcel information.
        Object[] options = {"Yes", "No"};
          int choice = JOptionPane.showOptionDialog(null, "Save Changes?", 
              "Confirm changes?", JOptionPane.YES_NO_OPTION, 
              JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
          
        //interpret the user's choice
        if (choice == JOptionPane.NO_OPTION)
        {
            setInformation();
            disableEntryFields();
            resetMenuAndButtons();

            //update the parcelStateJComboBox with the new updated information.
            setParcelByState();
            updateJButton.setEnabled(false);
            updateJMenuItem.setEnabled(false);
        }  
        else
        {
            try 
            {
                if (nameJTextField.getText().trim().equals("") ||
                addressJTextField.getText().trim().equals("") ||
                cityJTextField.getText().trim().equals("") ||
                zipJFormattedTextField.getText().equals("     ") )
                throw new NullPointerException();

                getInformation();

                ParcelInformation temp = shippingInfo.get(currentlySelectedIndex);

                temp.setName(nameJTextField.getText().trim());
                temp.setAddress(addressJTextField.getText().trim());
                temp.setCity(cityJTextField.getText().trim());
                temp.setState(stateJComboBox.getSelectedItem().toString());
                temp.setZip(zipJFormattedTextField.getText());

                if (shippingInfo.size() <= 1)
                {disableScrolling();}
                //if array size is greater than 2, enable back/next buttons.
                else
                {enableScrolling();}

                //Set appropriate texti fields back to unselectable upon successful update.
                disableEntryFields();
                resetMenuAndButtons();

                //update the parcelStateJComboBox with the new updated information.
                setParcelByState();
                updateJButton.setEnabled(false);
                updateJMenuItem.setEnabled(false);
                
                //write the newly entered data to the shippingInfo array list.
                saveParcelData();

                //set the parcelStateJComboBox to match that with the user entry.
                parcelStateJComboBox.setSelectedItem(stateJComboBox.getSelectedItem());
            }
            catch(NullPointerException ex)
            {
                JOptionPane.showMessageDialog(null, "One or more entry fields has " +
                        "invalid entry." + "\n" + "Make sure all fields are filled out" + 
                        " correctly.", "Invalid Entry", + JOptionPane.WARNING_MESSAGE);                    
            }
        }
    }//GEN-LAST:event_updateJButtonActionPerformed
    
    /**
     * When selected, it cycles through the array list to the previously entered
     * parcel information. When selecting beyond the first entry, it will cycle to
     * the last entry.
     * @param evt backJButtonActionPerformed
     */
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        if(currentlySelectedIndex > 0)
        {currentlySelectedIndex--;}
        else
        {currentlySelectedIndex = shippingInfo.size() -1;}
        setInformation();
    }//GEN-LAST:event_backJButtonActionPerformed

    /**
     * When selected, it cycles through the array list to the next entered
     * parcel information. When selecting beyond the last entry, it will cycle to
     * the first entry.
     * @param evt nextJButtonActionPerformed
     */
    private void nextJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextJButtonActionPerformed
        if(currentlySelectedIndex < shippingInfo.size() -1 )
        {currentlySelectedIndex++;}
        else
        {currentlySelectedIndex = 0;}
        setInformation();
    }//GEN-LAST:event_nextJButtonActionPerformed
    
    /**
     * When focused is gained it check to see if valid entry has been made, if not
     * resets the field to blank, so that the user must enter numerical values and not 
     * strings.
     * @throws Exception
     * @param evt zipJFormattedTextFieldFocusGained
     */
    private void zipJFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_zipJFormattedTextFieldFocusGained
        //Set the zipJFormattedTextField field to blank.
        try{Integer.parseInt(zipJFormattedTextField.getText());}
        catch(Exception ex){zipJFormattedTextField.setText("");}
    }//GEN-LAST:event_zipJFormattedTextFieldFocusGained

    /**
     * When selected, sets all the entry fields to blank and request the focus
     * to the nameJTextField.
     * @param evt clearJMenuItemActionPerformed
     */
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJMenuItemActionPerformed
        nameJTextField.requestFocus();
        nameJTextField.setText("");
        addressJTextField.setText("");
        cityJTextField.setText("");
        zipJFormattedTextField.setText("");
    }//GEN-LAST:event_clearJMenuItemActionPerformed

    /**
     * When selecting an item from the parcelStateJComboBox, calls the 
     * setParcelByState method to update and populate the selected item
     * with the matching state if there is one.
     * @param evt parcelStateJComboBoxActionPerformed
     */
    private void parcelStateJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parcelStateJComboBoxActionPerformed
        setParcelByState();
    }//GEN-LAST:event_parcelStateJComboBoxActionPerformed

    /**
     * When selecting the parcelIDJList, it runs a for loop search to match the
     * currently selected item index value with the parcel ID that was selected
     * from the list and display it.
     * @param evt parcelIDJListMouseClicked
     */
    private void parcelIDJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_parcelIDJListMouseClicked
        try 
        {   
            int i;   
            int tempint = Integer.valueOf(parcelIDJList.getSelectedValue()
                .toString());
            
            ParcelInformation temp;
            
            for(i = 0;  i < shippingInfo.size();i++)
            {
                temp = shippingInfo.get(i);
                if(temp.parcelID == tempint)
                {
                    currentlySelectedIndex = i;
                }
            }
            
        setInformation();
        editJButton.setEnabled(true);
        editJMenuItem.setEnabled(true);   
        }
        //If user selects blank space in the list, catch exception and do nothing.
        catch(NullPointerException ex){}  
    }//GEN-LAST:event_parcelIDJListMouseClicked
    
    /**
     * Invoke what the scanNewJButton does.
     * @param evt scanNewJMenuItemActionPerformed
     */
    private void scanNewJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanNewJMenuItemActionPerformed
        scanNewJButton.doClick();
    }//GEN-LAST:event_scanNewJMenuItemActionPerformed

    /**
     * Invoke what the addJButton does.
     * @param evt addJMenuItemActionPerformed
     */
    private void addJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJMenuItemActionPerformed
        addJButton.doClick();
    }//GEN-LAST:event_addJMenuItemActionPerformed

    /**
     * Invoke what the removeJButton does.
     * @param evt 
     */
    private void removeJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJMenuItemActionPerformed
        removeJButton.doClick();
    }//GEN-LAST:event_removeJMenuItemActionPerformed

    /**
     * Invoke what the editJButton does.
     * @param evt editJMenuItemActionPerformed
     */
    private void editJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editJMenuItemActionPerformed
        editJButton.doClick();
    }//GEN-LAST:event_editJMenuItemActionPerformed

    /**
     * Invoke what the updateJButton does.
     * @param evt updateJMenuItemActionPerformed
     */
    private void updateJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJMenuItemActionPerformed
        updateJButton.doClick();
    }//GEN-LAST:event_updateJMenuItemActionPerformed

    /**
     * Invoke what the backJButton does.
     * @param evt backJMenuItemActionPerformed
     */
    private void backJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJMenuItemActionPerformed
        backJButton.doClick();
    }//GEN-LAST:event_backJMenuItemActionPerformed

    /**
     * Invoke what the nextJButton does.
     * @param evt nextJMenuItemActionPerformed
     */
    private void nextJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextJMenuItemActionPerformed
        nextJButton.doClick();
    }//GEN-LAST:event_nextJMenuItemActionPerformed

    /**
     * Calls the Print Utilities class to print out the entire GUI.
     * @param evt Menu Action Event.
     * @see PrintUtilities Class.
     * @throws printStackTrace
     */
    private void printJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJMenuItemActionPerformed
        try{PrintUtilities.printComponent(this);}
        catch(Exception e){e.printStackTrace();} //Exception when printer is not found.
    }//GEN-LAST:event_printJMenuItemActionPerformed
    
    /**
     * Display the About Form when selected.
     * @param evt aboutJMenuItemActionPerformed
     */
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        AboutShippingHub myAbout = new AboutShippingHub();
        myAbout.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

     /**
     * Method: readStates -
     * A method to read the StateList.txt file and populate the StateJCombobox
     * and the parcelStateJComboBox.
     * Author: Ryu Muthui
     * @param inFilename 
     * @throws FileNotFoundException
     * @throws IOException
     * @return void
     */
    private void readStates(String inFilename)
    {
      FileReader inputFile;
      BufferedReader input;
      try
      {
          inputFile = new FileReader(inFilename);
          input = new BufferedReader(inputFile);
          
          //read a line of unput from text file
          String lineOfInput = input.readLine();
          
          while(lineOfInput!= null)//for each line of input
          {
              state = lineOfInput.toString();//read name
              stateJComboBox.addItem(state);
              parcelStateJComboBox.addItem(state);
              lineOfInput = input.readLine();
          }      
      }
      catch(FileNotFoundException ex)
      {
          JOptionPane.showMessageDialog(null, "Error: File Not Found.", 
                  "File Open Error", + JOptionPane.WARNING_MESSAGE);    
      }
      catch(IOException ex)
      {
          JOptionPane.showMessageDialog(null, "Error: File Not Found.", 
                  "File Open Error", + JOptionPane.WARNING_MESSAGE);  
      }    
    }
    
    /**
     * Method: disableButtonsAndMenus -
     * A method to disable the appropriate menu items and buttons when starting the application.
     * Author: Ryu Muthui
     * @return void
     */
    private void disableButtonsAndMenus()
    {
        //disabled buttons and comboboxes at start
        parcelIDJTextField.setText("No Parcels in Database. Click [Scan New] to begin.");
        parcelIDJTextField.setEditable(false); 
        nameJTextField.setEditable(false);
        addressJTextField.setEditable(false);
        cityJTextField.setEditable(false);
        zipJFormattedTextField.setEditable(false);
        stateJComboBox.setEnabled(false);      
        addJButton.setEnabled(false);
        removeJButton.setEnabled(false);
        editJButton.setEnabled(false);
        updateJButton.setEnabled(false);
        backJButton.setEnabled(false);
        nextJButton.setEnabled(false);
        parcelStateJComboBox.setEnabled(false);                
        parcelIDJList.setEnabled(false); 
        
        //disabled menu items on start                
        addJMenuItem.setEnabled(false);                
        removeJMenuItem.setEnabled(false);   
        editJMenuItem.setEnabled(false);   
        updateJMenuItem.setEnabled(false);   
        backJMenuItem.setEnabled(false);    
        nextJMenuItem.setEnabled(false);   
        clearJMenuItem.setEnabled(false);
    }

    /**
    * Method: enableAddingOfParcelInfo -
    * A method to enable and disable the appropriate menu items and buttons
    * when the user selects to add a new parcel information.
    * Author: Ryu Muthui
    * @return void
    */
    private void enableAddingOfParcelInfo()
    {
        parcelIDJTextField.setText("");
        scanNewJButton.setEnabled(false);
        addJButton.setEnabled(true);
        
        //set the appropriate text fields to blank.
        nameJTextField.requestFocus();
        addJButton.requestFocus();
        nameJTextField.setText("");
        addressJTextField.setText("");
        cityJTextField.setText("");
        zipJFormattedTextField.setText("");
        
        //enable the text fields so that the user can enter data.
        nameJTextField.setEditable(true);
        addressJTextField.setEditable(true);
        cityJTextField.setEditable(true);
        zipJFormattedTextField.setEditable(true);
        stateJComboBox.setEnabled(true);  
        
        
        //disable and enable appropriate button and menu items.
        clearJMenuItem.setEnabled(true);
        scanNewJMenuItem.setEnabled(false);
        addJMenuItem.setEnabled(true);
        removeJButton.setEnabled(false);
        removeJMenuItem.setEnabled(false);
        editJButton.setEnabled(false);
        editJMenuItem.setEnabled(false);
        updateJButton.setEnabled(false);
        updateJMenuItem.setEnabled(false);
        backJButton.setEnabled(false);
        backJMenuItem.setEnabled(false);
        nextJButton.setEnabled(false);
        nextJMenuItem.setEnabled(false);
        parcelStateJComboBox.setEnabled(false);                
        parcelIDJList.setEnabled(false);  
    }
    
    /**
    * Method: enableEditing -
    * A method to enable and disable the appropriate menu items and buttons
    * when the user selects to edit an existing parcel information.
    * Author: Ryu Muthui
    * @return void
    */
    private void enableEditing()
    {
        //enable appropriate fields when selecting editing option. 
        nameJTextField.setEditable(true);
        addressJTextField.setEditable(true);
        cityJTextField.setEditable(true);
        zipJFormattedTextField.setEditable(true);
        stateJComboBox.setEnabled(true);   
        
        //disabled button items when selecting editing option. 
        addJButton.setEnabled(false);
        removeJButton.setEnabled(false);
        editJButton.setEnabled(false);
        updateJButton.setEnabled(true);
        backJButton.setEnabled(false);
        nextJButton.setEnabled(false);
        parcelStateJComboBox.setEnabled(false);                
        parcelIDJList.setEnabled(false);  
        scanNewJButton.setEnabled(false);
        
        //disabled menu items when selecting editing option.               
        addJMenuItem.setEnabled(false);                
        removeJMenuItem.setEnabled(false);   
        editJMenuItem.setEnabled(false);   
        updateJMenuItem.setEnabled(true);   
        backJMenuItem.setEnabled(false);    
        nextJMenuItem.setEnabled(false);   
        clearJMenuItem.setEnabled(true);
        scanNewJMenuItem.setEnabled(false);
    }
    
    /**
    * Method: getInformation -
    * A method to get data from all appropriate fields and store them to the
    * corresponding variable so that it can be passed to the array list.
    * Author: Ryu Muthui
    * @return void
    */
    private void getInformation()
    {
        parcelID = Integer.parseInt(parcelIDJTextField.getText());
        name = nameJTextField.getText().trim();
        address = addressJTextField.getText().trim();
        city = cityJTextField.getText().trim();
        state = stateJComboBox.getSelectedItem().toString();
        zip = zipJFormattedTextField.getText();
        arrivalTime = arrivalJTextField.getText();
    }
     
    /**
    * Method: setInformation -
    * A method to get data from the array list at the corresponding index and 
    * set the data in the appropriate fields to be displayed to the user.
    * Author: Ryu Muthui
    * @return void
    */
    private void setInformation()
    {
        nameJTextField.setText(shippingInfo.get(currentlySelectedIndex).getName());
        addressJTextField.setText(shippingInfo.get(currentlySelectedIndex).getAddress());
        cityJTextField.setText(shippingInfo.get(currentlySelectedIndex).getCity());
        stateJComboBox.setSelectedItem(shippingInfo.get(currentlySelectedIndex).getState());
        zipJFormattedTextField.setText(shippingInfo.get(currentlySelectedIndex).getZip());
        parcelIDJTextField.setText(Integer.toString(shippingInfo.get(currentlySelectedIndex).getParcelID()));
        arrivalJTextField.setText(shippingInfo.get(currentlySelectedIndex).getArrivalTime());
    }
    
    /**
     * Method: setParcelByState -
     * A method to set the parcelStateJComboBox with parcel ID numbers that were
     * scanned into the program. It runs a search through the array list and finds
     * all matching parcel ID numbers and adds them accordingly to the state's entry.
     * Author: Ryu Muthui
     * @return void
     */
    private void setParcelByState()
    {
        int i, j = 0;
        
        ParcelInformation temp;
        
        DefaultListModel myListModel = new DefaultListModel();
        
            for (i = 0; i < shippingInfo.size(); i++)
            {
                temp = shippingInfo.get(i);
                
                if(temp.getState().equals(parcelStateJComboBox.getSelectedItem()))
                {
                    myListModel.add(j, String.valueOf(temp.getParcelID()));
                    j++;
                }
            }            
            parcelIDJList.setModel(myListModel);
        }
    
    /**
     * Method: enableScrolling -
     * A method to enable the appropriate menu item and buttons to allow the user
     * to scroll through the array list.
     * Author: Ryu Muthui
     * @return void
     */
    private void enableScrolling() 
    {
        backJButton.setEnabled(true);
        backJMenuItem.setEnabled(true);
        nextJButton.setEnabled(true);
        nextJMenuItem.setEnabled(true);
    }
    
    /**
     * Method: disableScrolling -
     * A method to disenable the appropriate menu item and buttons to stop the user
     * from scroll through the array list.
     * Author: Ryu Muthui
     * @return void
     */
    private void disableScrolling() 
    {
        backJButton.setEnabled(false);
        backJMenuItem.setEnabled(false);
        nextJButton.setEnabled(false);
        nextJMenuItem.setEnabled(false);
    }
    
    /**
     * Method: disableEntryFields -
     * A method to disenable the appropriate entry fields to stop the user
     * from entering new data.
     * Author: Ryu Muthui
     * @return void
     */
    private void disableEntryFields()
    {
        nameJTextField.setEditable(false);
        addressJTextField.setEditable(false);
        cityJTextField.setEditable(false);
        zipJFormattedTextField.setEditable(false);
        stateJComboBox.setEnabled(false);
    }
    
    /**
     * Method: resetMenuAndButtons -
     * A method to disenable/enable the appropriate menu items and buttons
     * after adding and or updating the parcel information.
     * Author: Ryu Muthui
     * @return void
     */
    private void resetMenuAndButtons()
    {
        parcelStateJComboBox.setEnabled(true);
        parcelIDJList.setEnabled(true);
        scanNewJButton.setEnabled(true);
        scanNewJMenuItem.setEnabled(true);
        addJButton.setEnabled(false);
        addJMenuItem.setEnabled(false);
        removeJButton.setEnabled(true);
        removeJMenuItem.setEnabled(true);
        editJButton.setEnabled(true);
        editJMenuItem.setEnabled(true);
        clearJMenuItem.setEnabled(false);
    }

    /**
     * Method: readParcelData -
     * A method to retrieve the parcel information from the parcelData.txt file
     * so that previously entered and stored information can be recalled into the
     * application.
     * Author Ryu Muthui
     * @param parcelData 
     * @throws Exception
     * @return void
     */
    private void readParcelData(String parcelData)
    {
      try
      {
          //local variable to count the number of parcel data.
          int tempParcelCount = 0;  
          
          ReadFile parcelFile = new ReadFile(parcelData);
          String lineOfInput = parcelFile.readRecord();
         
          while(lineOfInput!= null)//for each line of input
          {
              tempParcelCount++;
              StringTokenizer inputField = new StringTokenizer (lineOfInput, ",");
              
              //for each line of input
              while(inputField.hasMoreElements())    
              {
                  //local variables to hold parcel data
                  String  tempArrivalTime, tempName, tempAddress, tempCity, 
                          tempState, tempZipCode;    
                  int tempParcelID;

                  //next element in inputField is copied to tempParcelID
                  tempParcelID  = Integer.parseInt(inputField.nextElement().toString());
                  //next element in inputField is copied to tempName
                  tempName = inputField.nextElement().toString();  
                  //next element in inputField is copied to tempAddress
                  tempAddress = inputField.nextElement().toString(); 
                  //next element in inputField is copied to tempCity
                  tempCity = inputField.nextElement().toString();
                  //next element in inputField is copied to tempState
                  tempState = inputField.nextElement().toString();        
                  //next element in inputField is copied to tempZipCode
                  tempZipCode = inputField.nextElement().toString();     
                  //next element in inputField is copied to tempArrivalTime   
                  tempArrivalTime = inputField.nextElement().toString();    
                  //next element in inputField is copied to tempArrivalTime
          
                  //pass the information obtained to myParcel object.
                  myParcel = new ParcelInformation(tempParcelID, tempName, tempAddress,
                          tempCity, tempState, tempZipCode, tempArrivalTime);

                  //add information to the array list.
                  shippingInfo.add(myParcel);

                  //set the currenlty selected item index to match that of the entry of the array.
                  currentlySelectedIndex = shippingInfo.indexOf(myParcel);
              }
               // read next line from ReadFile class 
              lineOfInput = parcelFile.readRecord();            // read next line from ReadFile class 
          }
          
          if(shippingInfo.size() > 0) 
          {    
            setInformation();
            resetMenuAndButtons();
            setParcelByState(); 
          }
          else
          {disableButtonsAndMenus();}
            
        //check if array size is less than 1, if so disable back/next buttons.
        if (shippingInfo.size() <= 1){disableScrolling();}
        //if array size is greater than 2, enable back/next buttons.
        else {enableScrolling();}
        
        //Set appropriate text fields back to unselectable upon successful add.
        disableEntryFields();
        
        //set the parcelStateJComboBox to match that with the user entry.
        parcelStateJComboBox.setSelectedItem(stateJComboBox.getSelectedItem());

        //call setParcelByState method to update the parcelStateJComboBox.
        setParcelByState();      
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error: File Not Found.", 
               "File Open Error", + JOptionPane.WARNING_MESSAGE);    
        }
    }
   
    /**
     * Method: saveParcelData -
     * A method to write to the parcelData.txt file to save the shippingInfo Array
     * List values so that previously entered and stored information can be recalled 
     * into the application at a later time.
     * Author Ryu Muthui
     * @return void
     */
    private void saveParcelData()
    {
        try
        {   
            //initiate WriteFile
            WriteFile saveParcelData = new WriteFile(parcelData);   
            for(int index = 0; index < shippingInfo.size(); index++) 
            {
                // get parcel from parcelArrayList by index and load it to variable 
                myParcel = shippingInfo.get(index);   
                String output = myParcel.toString();
                saveParcelData.write(output);
            }
            saveParcelData.close();
        }
        catch(IOException ex){}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShippingHubGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShippingHubGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShippingHubGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShippingHubGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShippingHubGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JMenu actionJMenu;
    private javax.swing.JButton addJButton;
    private javax.swing.JMenuItem addJMenuItem;
    private javax.swing.JLabel addressJLabel;
    private javax.swing.JTextField addressJTextField;
    private javax.swing.JPanel arrivalJPanel;
    private javax.swing.JTextField arrivalJTextField;
    private javax.swing.JLabel arrivedJLabel;
    private javax.swing.JButton backJButton;
    private javax.swing.JMenuItem backJMenuItem;
    private javax.swing.JLabel cityJLabel;
    private javax.swing.JTextField cityJTextField;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JButton editJButton;
    private javax.swing.JMenuItem editJMenuItem;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenuBar fielJMenuBar;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JLabel nameJLabel;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JButton nextJButton;
    private javax.swing.JMenuItem nextJMenuItem;
    private javax.swing.JPanel parcelByStateJPanel;
    private javax.swing.JLabel parcelIDJLabel;
    private javax.swing.JList parcelIDJList;
    private javax.swing.JScrollPane parcelIDJScrollPane;
    private javax.swing.JTextField parcelIDJTextField;
    private javax.swing.JPanel parcelInfoJPanel;
    private javax.swing.JLabel parcelJLabel;
    private javax.swing.JComboBox parcelStateJComboBox;
    private javax.swing.JMenuItem printJMenuItem;
    private javax.swing.JButton removeJButton;
    private javax.swing.JMenuItem removeJMenuItem;
    private javax.swing.JButton scanNewJButton;
    private javax.swing.JMenuItem scanNewJMenuItem;
    private javax.swing.JComboBox stateJComboBox;
    private javax.swing.JLabel stateJLabel;
    private javax.swing.JButton updateJButton;
    private javax.swing.JMenuItem updateJMenuItem;
    private javax.swing.JLabel zipCodeJLabel;
    private javax.swing.JFormattedTextField zipJFormattedTextField;
    // End of variables declaration//GEN-END:variables
}
